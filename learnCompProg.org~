Learn Computer Programming -*- mode: org -*-

* Welcome!

Welcome to my website dedicated to all people everywhere who are interested
in learning computer programming. This is a passion of mine, and I want to
learn with you and from you, and share with you ways you can:

1. Learn computer programming.
2. Monetize computer programming as a hobby, side job, or even a career.
3. Use computer programming to free yourself to do other things.

Of course, the above concepts are not independent: your interest in them may have these concepts overlap considerably.

* Motivation

Why learn computer programming? Because you are interested in ...

1. Additional income. The finacial incentive here is huge. Computer programming is one of the highest-paying industries today. See some [[https://money.usnews.com/careers/best-jobs/computer-programmer/salary][2017 data]] on computer programmer compensation in the U.S. Also, here is some [[https://www.bls.gov/ooh/computer-and-information-technology/computer-programmers.htm][data]] from the U.S. Bureau of Labor Statistics.
2. A flexible job. Computer programmers can work from any place where they have access to a computer network, and they can generally set their own hours.
3. Saving time and effort. Often, mind-numbing and repetitive tasks on a computer can be automated. This saves time and energy, and eliminates human fatigue along with associated human errors. When tasks are automated, humans are liberated to perform other tasks that are not so easily automated. Productivity is increased, and the cost of labor for automated tasks is saved. Tasks that could be automated can be as simple as renaming several photos in a consistent way or finding and deleting duplicate photos in your photo library. Personally, I've saved thousands of person-hours of labor by automating the collection, analysis, and visualizing scientific data, and I've taught others to do the same. Another interesting application of computer automation is algorithmic trading. Here, computer-savvy investors write programs to monitor market conditions. Certain conditions trigger buy or sell events for certain stocks. Having systematized trading in this manner, the trader is now unbudened from closely monitoring the market, and finds the freedom to do other things.
4. A beautiful and fun life-long mental exercise and discipline. I think of computer programming as an art and science of solving problems logically, and in a robust manner. I find few tasks as satisfying as writing smart, reusable code which accomplishes a task effectively and robustly. This is a fun exercise that can change the way you approach problems in all areas of life, as computer programming is an exercise in applied logic and problem-solving.
Let us now further motivate your interests in computer programming,
as well as uncover some of your personal interests and goals here so
that you may better guide your learning and exploration into the world of
computer programming. To do this, I have compiled for you some videos
that you can watch to help you think about how you might make use of
computer programming.

As you watch, ask your self some questions:
1. How would you like to use computer programming? The answer to this can help you figure out what languages you should learn. One common answer is to learn web develpment. In that case, a new web developer should learn HTML, [[https://www.javascript.com][JavaScript]], and CSS. People who are interested in automating tasks could consider the wildly-popular [[https://www.python.org][Python]]. Scientific programmers might want to learn [[https://www.mathworks.com/products/matlab.html][Matlab]] or its open-source clone, [[https://www.gnu.org/software/octave/][Octave]]. Video designers or animators may be interested in Python and [[https://www.blender.org][Blender]]. Game designers might want to learn C#. iOS developers should learn Swift, and mobile apps may be written in numerous other languages, like Python or JavaScript.
2. What opportunities can you find or create to help you earn income from computer programming? It is helpful to have a goal in mind to help focus and direct your learning efforts. 

* Tips
Some practical tips here. You'll also encounter these in the videos, but I think they are worth highlighting.
- Practice is vital.
  - Like learning spoken languages, learning computer programming requires lots of practice.
  - I recommend starting with one language at first. Get proficient at this one language, and you'll find that many of the concepts you learned for your first language are transferrable and will help you learn other languages.
  - Daily practice is best. It's frustrating to practice a language only once a week or once a month. You'll forget and relearn things. Daily practice cements the neuropathways and really makes the knowledge stick. I'm speaking from personal experience, and as a university-level educator in the science and engineering disciplines.
- Find a community of other people who also aspire to learn computer programming, be it online or (virtual) or based on real, face-to-face human interaction.
  - People in community can encourage one another to push forward through difficulty and motivate one another to learn more. Also, they can share insights. Facing challenges often is best done with a community, and learning programming is no exception. The support and insight of others will likely be a key factor in learning computer programming.
  - One of the best ways to learn is to teach. As a teacher, I've found that I develop the strongest grasp and the best insights into a subject or a skill when I teach others. This is another reason community is important: it provides opportunities to teach and share what you learned.
  - Find mentors. Better than teaching alone and self-study is a combination of teaching, self-study, and being taught or mentored. This holds true for all areas of life. When I was studying martial arts, my progress was at its fastest when I studied under a teacher, and I myself was a teacher to others. Within a community of like-minded learners, you can find mentors for yourself, also. Mentors can tell you about that weak area you didn't even know you had, or they can give you an insider tip that makes simple a challenge you thought was insurmountable.
- Fall in love with [[https://stackoverflow.com][stackoverflow.com]]. I don't really need to tell you this one, as you'll likely find stackoverflow.com yourself and fall in with it yourself.
  - When you get stuck, or if you want to know how skilled programmers perform a task in a particular language, do a Google search for "how to do X in Y", where "X" is the the task you want to accomplish, and "Y" is name of your programming language. The top hits will likely include stackoverflow.com discussions on your task or error. In these threads, it is very likely that you will find minimal examples that show you how to deal with the issue you face.
  - If your code gives you an error, copy and paste it into a Google search, or at stackoverflow.com. You'll likely turn up a stackoverflow.com thread that discusses the error and how to fix it. All roads lead to stackoverflow.com.
  - "I am one with stackoverflow; stackoverflow is with me."
- Use projects to make your learning fun and meaningful.
  - This technique is known as "project-based learning" in the world of education, and it is supported by much research (and personal experience!)
  - This is especially useful for adult learners.
  - Look for websites, coding bootcamps, tutorials, or books that use exercises and projects to help you apply the knowlege, and make sure you do the projects! 
  - Examples of projects could be:
    - Build a website resume or curriculum vitae
    - Build a simple mobile app or game

* How To Learn Computer Programming
There are three major ways to learn computer programming:
1. Formal education. This is the costliest way. Here, you pay for tuition at a college or university and textbooks and lab fees, and room and board, if necessary. As part of your curriculum, you take classes in which you learn the principles of computer programming and put them into practice. While costly, it can provide a solid foundation for programming, and it comes with mentoring (a professor and teaching assistants) as well as a community (classmates) and networking opportunities (programming-focused clubs, career fairs). This may also take a long time: two to five years, depending on your degree. Of course, you don't have to wait until you have a degree to program. A motivated student can be doing internships or developing apps and websites long before graduating. 
2. Coding bootcamps. Typically not as costly as formal education, these are paid experiences that are designed to get students programming in a language in a matter of weeks or months. The price tag here can be a few thousand dollars. Perhaps some of the theory taught in formal education is skipped in favor of more practical concepts. Unfortunately, I have no experience with these, but I do know that recent years have seen a rapid explosion in the growth of bootcamp experiences.
3. Self-teaching. This is typically the cheapest option in terms of cash, but the costliest in the sense that it requires the most personal dedication, diligence, and motivation. To be successful, you must carve out time each day to practice, and you must build your own community, and find mentors who can help guide/push you along. Here, you can leverage numerous free online resources, buy books, and study what you want to learn or what you think is important.

In reality, you may employ a combination of these. Personally, my foundation is broad enough that when I need to learn new skills in programming, I can simply find a few tutorials or visit stackoverflow.com, skim for what's most relevant to my project, and get to work. Since each person has a different background, he or she will need to figure out what combinations of the above methods are best suited to meet his/her goals.

Later, I'll tell you more about my personal story so you can see what worked for me.
 
* Resoruces for Learning
This section is under development. I plan to add new resources often.
** Videos
There are great tips here on what it takes to teach yourself programming. Watch these videos to help you figure out where you can go with programming and what opportunities you want to pursue/create for yourself.
- Sylvester Morgan
  - [[https://youtu.be/iIfZV43j4UU][How to Teach Yourself Code (Specific Steps)]]
  - (Advanced discussion) [[https://youtu.be/_1wv7b_kHKk][Become a developer - must know topics for developers without a CS degree]]
  - [[https://youtu.be/HX6ckeZYQDg][Coding Bootcamp vs Degree vs Self-Taught (Best Method To Become A Developer?)]]
- TEDxRainer: [[https://youtu.be/FpMNs7H24X0]["Computer science is for everyone", Hadi Partovi]]
- [[https://youtu.be/THSSHUfSZjc]["How can I make a career change to programming?"]]
- [[https://youtu.be/62tsiY5j4_0]["My Story of Being a Self Taught Programmer ..."]]
- [[https://youtu.be/g9-OS0Pbg4I]["How To Transition Into Software Development ... From A ... Different Field"]]
- [[https://youtu.be/qZKvZzRynLE]["How To Teach Yourself to Code (ft. Quincy Larson)"]].



** Practice/Learn Computer Programming

This is a very important section.

- [[https://studio.code.org/courses][Learn Computer Science]] from [[https://code.org][code.org]]. This is the link to their "courses" home. There are numerous activities for people of all ages and skill levels. I've never tried, these, but based on your interest, I might recommend:
  - [[https://code.org/educate/weblab][weblab]] for Grades 7-9.
- [[https://ryanstutorials.net][Ryan's Tutorials]]. Like me, Ryan is an educator. He has tutorials on:
  - [[https://ryanstutorials.net/linuxtutorial/][Linux]],
  - [[https://ryanstutorials.net/bash-scripting-tutorial/][Bash scripting]],
  - [[https://ryanstutorials.net/html-tutorial/][HTML]] and [[https://ryanstutorials.net/css-tutorial/][CSS]], as well as
  - other languages/concepts. I found his Bash tutorial very helpful, so I hope the others are helpful, also.
* My Personal Journey
I'll now tell you about my personal journey into computer programming. It's *a way*, not *the way* to learn computer programming. You should use this story as one perspective that can help you plot your own course to the use and mastery of computer programming.

The short story is that I became a computer programmer through formal education, and that now I have enough experience to learn new skills and languages by looking up "how to ..." on Google/stackexchange.com. I was an electrical engineering student, and it was required for me to learn computer programming in Fortran90, C++, and MATLAB. Through years of research at the M.S. and Ph.D. level, I developed further mastery of MATLAB. This is my primary computer language. However, my knowledge of MATLAB is highly transferrable to Python, so that I can learn Python in a very piecemeal, task-driven manner. I look up "how to X in Python 3", and then I set out to do it.

The longer story is that even before I got to college, I had a long history of fun programming experiences:
- [[Terrapin Logo]] (age 10). I stayed part of the summer with cousins, and my uncle, an engineer, enrolled us in a week-long programming experience. We used a rudimentary drawing program (it looks like it's evolved much since then) called Terrapin Logo. This was my first experience at giving a computer instructions to perform a task. Instructions were typed in one at a time, I believe! I didn't really know what to think about computer programming at this time, but a seed of knowledge was planted.
- [[https://en.wikipedia.org/wiki/BASIC][BASIC]] (age 11). In elementary school, we had weekly computer-lab experiences in BASIC. This was my first experience with writing a computer program: a pre-defined set of instructions that I give the computer. Instructions were numbered with "line numbers," so I could have the computer execute instructions and then skip backward or forward to specific lines. I began to have a faint impression of how this could be fun challenge in problem solving.
- Spreadsheets (age 12). I saw an uncle using spreadsheets, and I was impressed by how they help manipulate large amounts of data easily. Repetitive tasks were made simple, analysis was as simple as writing a formula, and data was well-organized in a spreadsheet! I don't remember what program he was using.
- [[https://en.wikipedia.org/wiki/Turbo_Pascal][Turbo Pascal]] (age 16). I took a high school elective in Turbo Pascal. I learned about variables, data types, and groups of instructions called "procedures." We made computer graphics, now my imagination was captivated by how powerful computer programming could be. There were endless possibilities! I obtained a copy of Turbo Pascal, installed it on our family's personal computer, and I had fun creating programs of my own. By this time, I had begun to grasp that this was an exacting discipline, and I was surprised to find that not everyone loved it. Some people did not like the precision with which programs had to be written, but that did not bother me at all.

I had no idea at the time, but that week of computer-based drawing as a child put me on a life-long path that led me to where I am today. I'm a professor and a researcher in quantum informations sciences, and I use computer programming on the job every day to generate, analyze, and visualize data. I use it to generate publications, and I use it to automate tasks.

I suggest that two lessons may be extracted here (you can probably find a few other ideas, also):
1. Parents, expose your children to computer programming. You never know how it might captivate them, or where it may lead.
2. Each person who wishes to learn programming should create their own path based on his or her own background. Your path may consist of some combination of the methods (formal education, bootcamps, and self-teaching), and it will most likely be different from my path.
